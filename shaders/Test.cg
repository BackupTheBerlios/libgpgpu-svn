
void fill(
		float2 outputCoord			: TEXCOORD0, // Subtract 0.5 to get real coord
		
		out float4 col		: COLOR,
		
		uniform float4 tintColour
		)
{
	col = tintColour;
}
void coord(
		float2 outputCoord			: TEXCOORD0,
		out float col		: COLOR
		)
{
	col = outputCoord.y;
}

void add(
        float2 outputCoord	 : TEXCOORD0,
        uniform samplerRECT a,
		uniform samplerRECT b,
		out float col		 : COLOR
		)
{
	col = texRECT(a, outputCoord) * texRECT(b, outputCoord+float2(1,0));
}

void diffuse(
        float2 outputCoord	 : TEXCOORD0,
        uniform samplerRECT input,
		out float col		 : COLOR
		)
{
	col = 0.2*texRECT(input, outputCoord) +
          0.2*texRECT(input, outputCoord+float2(1.0,0.0f)) +
          0.2*texRECT(input, outputCoord+float2(0.0,1.0f)) +
          0.2*texRECT(input, outputCoord+float2(-1.0,0.0f)) +
          0.2*texRECT(input, outputCoord+float2(0.0,-1.0f));
}

/// Horizontal sort
void sortHorizontal(
        float2 outputCoord	 : TEXCOORD0,
        uniform samplerRECT input,
        uniform samplerRECT ops,
        uniform float offset,       // Radius
        uniform float spass,        // Sorting pass id
		out float4 col		 : COLOR
		)
{
    /// Fetch operation to do in this pass, multiply by two to convert into [-1,1] range
    /// op[0] is operation (1 GT, -1 LE)
    /// op[1] is offset sign
    float4 op = texRECT(ops, float2(outputCoord[0], spass)) * 2.0 - 1.0;
    /// Do operation
    float4 val1 = texRECT(input, outputCoord);
    float4 val2 = texRECT(input, outputCoord+float2(op[1]*offset, 0));
    if(val1[0]*op[0] > val2[0]*op[0])
    {
        col = val2;
    }
    else
    {
        col = val1;
    }
}

/// Horizontal flip
/// Flip every 'skip' rows
void flipHorizontal(
        float2 outputCoord	 : TEXCOORD0,
        uniform samplerRECT input,
        uniform float width,        // Width of texture
        uniform float skip,        // Width of texture
		out float4 col		 : COLOR
		)
{
    if(fmod(outputCoord[1], skip*2) > skip)
        col = texRECT(input, float2(width-outputCoord[0], outputCoord[1]));
    else
        col = texRECT(input, outputCoord);
}

/// Vertical sort
void sortVertical(
        float2 outputCoord	 : TEXCOORD0,
        uniform samplerRECT input,
        uniform samplerRECT ops,
        uniform float offset,       // Radius
        uniform float spass,        // Sorting pass id
		out float4 col		 : COLOR
		)
{
    /// Fetch operation to do in this pass, multiply by two to convert into [-1,1] range
    /// op[0] is operation (1 GT, -1 LE)
    /// op[1] is offset sign
    float4 op = texRECT(ops, float2(outputCoord[1], spass)) * 2.0 - 1.0;
    /// Do operation
    float4 val1 = texRECT(input, outputCoord);
    float4 val2 = texRECT(input, outputCoord+float2(0, op[1]*offset));
    if(val1[0]*op[0] > val2[0]*op[0])
    {
        col = val2;
    }
    else
    {
        col = val1;
    }
}


// Generic sort. Needs control over texcoords.

// Texcoord 0 output coord (+input coord 1)
// Texcoord 1 input coord 2
// Texcoord 2 operation (sign 1.0..-1.0, 0 must fall on pivot)
void pivotHalf(
        half2 outputCoord	 : TEXCOORD0,
        half2 val2Coord	 : TEXCOORD1,
        half opt        	 : TEXCOORD2,
        uniform samplerRECT input,
		out half4 col		 : COLOR
		)
{
    /// Do operation
    half4 val1 = texRECT(input, outputCoord);
    half4 val2 = texRECT(input, val2Coord);
    half op = sign(opt);
    if(op*val1[0] > op*val2[0])
    {
        col = val2;
    }
    else
    {
        col = val1;
    }
}

// Texcoord 0 output coord (+input coord 1)
// Texcoord 1 input coord 2
// Texcoord 2 operation (sign 1.0..-1.0, 0 must fall on pivot)
void pivotFloat(
        float2 outputCoord	 : TEXCOORD0,
        float2 val2Coord	 : TEXCOORD1,
        float opt        	 : TEXCOORD2,
        uniform samplerRECT input,
		out float4 col		 : COLOR
		)
{
    /// Do operation
    float4 val1 = texRECT(input, outputCoord);
    float4 val2 = texRECT(input, val2Coord);
    float op = sign(opt);
    if(op*val1[0] > op*val2[0])
    {
        col = val2;
    }
    else
    {
        col = val1;
    }
}

